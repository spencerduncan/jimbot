# Dockerfile for Lua Testing Environment
# Provides a containerized environment for running Lua tests in CI

FROM ubuntu:22.04 AS base

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV LUA_VERSION=5.4

# Install system dependencies for Lua development
RUN apt-get update && apt-get install -y \
    # Build essentials
    build-essential \
    gcc \
    make \
    # Lua runtime and development headers
    lua5.4 \
    liblua5.4-dev \
    luarocks \
    # Additional tools
    curl \
    wget \
    git \
    unzip \
    # Debugging and utility tools
    strace \
    gdb \
    valgrind \
    # Text processing tools
    jq \
    && rm -rf /var/lib/apt/lists/*

# Install Lua testing and development tools
RUN luarocks install busted && \
    luarocks install luacheck && \
    luarocks install luacov && \
    luarocks install luacov-reporter-lcov && \
    luarocks install ldoc

# Download and install StyLua for code formatting
RUN wget -q https://github.com/JohnnyMorganz/StyLua/releases/download/v0.20.0/stylua-linux-x86_64.zip && \
    unzip stylua-linux-x86_64.zip && \
    chmod +x stylua && \
    mv stylua /usr/local/bin/ && \
    rm stylua-linux-x86_64.zip

# Create dedicated user for running tests
RUN useradd -m -s /bin/bash luatest

# Set working directory
WORKDIR /app

# Copy test configuration files
COPY .luacheckrc .stylua.toml ./
COPY tests/ ./tests/

# Debug: Show what files are available in build context
RUN echo "=== BUILD CONTEXT DEBUG ===" && \
    pwd && \
    echo "Current directory contents:" && \
    ls -la && \
    echo "Looking for docker/scripts directory:" && \
    ls -la docker/scripts/ 2>/dev/null || echo "docker/scripts/ directory not found" && \
    echo "=== END BUILD CONTEXT DEBUG ==="

# Create test runner scripts directly in the image
RUN echo '#!/bin/bash' > /usr/local/bin/run_lua_tests.sh && \
    echo 'set -e' >> /usr/local/bin/run_lua_tests.sh && \
    echo '' >> /usr/local/bin/run_lua_tests.sh && \
    echo "# Colors for output" >> /usr/local/bin/run_lua_tests.sh && \
    echo "RED='\\033[0;31m'" >> /usr/local/bin/run_lua_tests.sh && \
    echo "GREEN='\\033[0;32m'" >> /usr/local/bin/run_lua_tests.sh && \
    echo "YELLOW='\\033[1;33m'" >> /usr/local/bin/run_lua_tests.sh && \
    echo "BLUE='\\033[0;34m'" >> /usr/local/bin/run_lua_tests.sh && \
    echo "NC='\\033[0m' # No Color" >> /usr/local/bin/run_lua_tests.sh && \
    echo '' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_color() { echo -e "${1}${2}${NC}"; }' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_section() { echo; print_color "$BLUE" "====================================="; print_color "$BLUE" "    $1"; print_color "$BLUE" "====================================="; echo; }' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'OVERALL_SUCCESS=true' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'FAILED_TESTS=()' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_section "LUA TESTING ENVIRONMENT"' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_color "$GREEN" "Lua version: $(lua -v)"' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_color "$GREEN" "LuaRocks version: $(luarocks --version | head -1)"' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'luarocks list' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_section "STYLE CHECKS"' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'if find . -name "*.lua" -type f | xargs stylua --check 2>/dev/null; then print_color "$GREEN" "✓ Style check passed"; else print_color "$RED" "✗ Style check failed"; OVERALL_SUCCESS=false; FAILED_TESTS+=("style-check"); fi' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_section "LINT CHECKS"' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'LINT_OUTPUT=$(find . -name "*.lua" -type f | xargs luacheck --config .luacheckrc 2>&1); LINT_EXIT_CODE=$?; echo "$LINT_OUTPUT"; if [ $LINT_EXIT_CODE -eq 0 ]; then print_color "$GREEN" "✓ Lint check passed"; else print_color "$RED" "✗ Lint check failed"; OVERALL_SUCCESS=false; FAILED_TESTS+=(\"lint-check\"); fi' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_section "UNIT TESTS - SHOP NAVIGATION"' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'if [ -f "tests/run_tests.lua" ]; then if lua tests/run_tests.lua; then print_color "$GREEN" "✓ Shop navigation unit tests passed"; else print_color "$RED" "✗ Shop navigation unit tests failed"; OVERALL_SUCCESS=false; FAILED_TESTS+=("shop-navigation-tests"); fi; else print_color "$YELLOW" "⚠ Shop navigation test suite not found"; fi' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_section "INTEGRATION TESTS - GAME STATE"' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'if [ -f "tests/run_all_tests.lua" ]; then if lua tests/run_all_tests.lua; then print_color "$GREEN" "✓ Game state integration tests passed"; else print_color "$RED" "✗ Game state integration tests failed"; OVERALL_SUCCESS=false; FAILED_TESTS+=("game-state-tests"); fi; else print_color "$YELLOW" "⚠ Game state test suite not found"; fi' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_section "BUSTED TESTS"' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'if find . -name "*_spec.lua" -type f | grep -q .; then if busted --verbose; then print_color "$GREEN" "✓ Busted tests passed"; else print_color "$RED" "✗ Busted tests failed"; OVERALL_SUCCESS=false; FAILED_TESTS+=("busted-tests"); fi; else print_color "$YELLOW" "⚠ No Busted test files found"; fi' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'print_section "TEST SUMMARY"' >> /usr/local/bin/run_lua_tests.sh && \
    echo 'if [ "$OVERALL_SUCCESS" = true ]; then print_color "$GREEN" "✓ All Lua tests passed successfully!"; exit 0; else print_color "$RED" "✗ Some tests failed:"; for test in "${FAILED_TESTS[@]}"; do print_color "$RED" "  - $test"; done; exit 1; fi' >> /usr/local/bin/run_lua_tests.sh

RUN echo '#!/bin/bash' > /usr/local/bin/run_lua_tests_dev.sh && \
    echo '/usr/local/bin/run_lua_tests.sh' >> /usr/local/bin/run_lua_tests_dev.sh && \
    echo 'echo "Tests completed. Container staying alive for debugging..."' >> /usr/local/bin/run_lua_tests_dev.sh && \
    echo 'echo "Available commands:"' >> /usr/local/bin/run_lua_tests_dev.sh && \
    echo 'echo "  lua tests/run_tests.lua           - Run shop navigation tests"' >> /usr/local/bin/run_lua_tests_dev.sh && \
    echo 'echo "  lua tests/run_all_tests.lua       - Run game state tests"' >> /usr/local/bin/run_lua_tests_dev.sh && \
    echo 'echo "  luacheck tests/                   - Run lint checks"' >> /usr/local/bin/run_lua_tests_dev.sh && \
    echo 'echo "  stylua --check tests/             - Run style checks"' >> /usr/local/bin/run_lua_tests_dev.sh && \
    echo 'echo "  busted                            - Run Busted tests"' >> /usr/local/bin/run_lua_tests_dev.sh && \
    echo 'tail -f /dev/null' >> /usr/local/bin/run_lua_tests_dev.sh

# Make the scripts executable and verify they exist
RUN chmod +x /usr/local/bin/run_lua_tests.sh /usr/local/bin/run_lua_tests_dev.sh && \
    ls -la /usr/local/bin/run_lua_tests*.sh && \
    echo "=== SCRIPT FILES SUCCESSFULLY COPIED AND MADE EXECUTABLE ==="

# Set ownership for test user
RUN chown -R luatest:luatest /app

# Switch to test user
USER luatest

# Default command runs all tests
CMD ["/usr/local/bin/run_lua_tests.sh"]

# Development stage for interactive debugging
FROM base AS dev

# Switch back to root for development tools
USER root

# Install additional development tools
RUN apt-get update && apt-get install -y \
    vim \
    nano \
    less \
    htop \
    tree \
    man-db \
    && rm -rf /var/lib/apt/lists/*

# Switch back to test user
USER luatest

# Development command keeps container alive
CMD ["/usr/local/bin/run_lua_tests_dev.sh"]