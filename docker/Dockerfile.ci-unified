# Dockerfile.ci-unified
# Multi-stage Docker image for unified CI with all language toolchains
FROM ubuntu:22.04 AS base

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# System dependencies
RUN apt-get update && apt-get install -y \
    curl wget git build-essential pkg-config \
    libssl-dev libpq-dev ca-certificates \
    software-properties-common apt-transport-https \
    protobuf-compiler \
    && rm -rf /var/lib/apt/lists/*

# Python toolchain stage
FROM base AS python-tools
RUN apt-get update && apt-get install -y \
    python3 python3-dev python3-venv \
    python3-pip python3-setuptools python3-wheel \
    && rm -rf /var/lib/apt/lists/*

RUN python3 -m pip install --upgrade pip setuptools wheel

# Rust toolchain stage  
FROM base AS rust-tools
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
ENV PATH="/root/.cargo/bin:${PATH}"
# Install Rust tools - using latest compatible versions
RUN /root/.cargo/bin/cargo install cargo-audit && \
    /root/.cargo/bin/cargo install cargo-tarpaulin && \
    /root/.cargo/bin/cargo install cargo-nextest

# C++ toolchain stage - REMOVED
# C++ support has been removed as MAGE modules are being rewritten in Rust

# Lua toolchain stage
FROM base AS lua-tools
RUN apt-get update && apt-get install -y \
    lua5.4 luarocks \
    && rm -rf /var/lib/apt/lists/*
RUN luarocks install busted

# Node.js for additional tooling
FROM base AS node-tools
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    rm -rf /var/lib/apt/lists/*

# Combined CI image - Final stage
FROM base AS ci

# Copy installed components from previous stages
COPY --from=python-tools /usr/lib/python3* /usr/lib/
COPY --from=python-tools /usr/bin/python3* /usr/bin/
COPY --from=python-tools /usr/bin/pip3 /usr/bin/pip3
COPY --from=python-tools /usr/local /usr/local

# Copy Rust toolchain
COPY --from=rust-tools /root/.cargo /root/.cargo
COPY --from=rust-tools /root/.rustup /root/.rustup

# C++ tools removed - MAGE modules are being rewritten in Rust

# Copy Lua tools
COPY --from=lua-tools /usr/bin/lua5.4 /usr/bin/lua5.4
COPY --from=lua-tools /usr/bin/luarocks /usr/bin/luarocks
COPY --from=lua-tools /usr/local/share/lua /usr/local/share/lua
COPY --from=lua-tools /usr/local/lib/luarocks /usr/local/lib/luarocks

# Copy Node.js
COPY --from=node-tools /usr/bin/node /usr/bin/node
COPY --from=node-tools /usr/bin/npm /usr/bin/npm

# Set up workspace
WORKDIR /workspace

# Environment variables
ENV PATH="/root/.cargo/bin:${PATH}"
ENV PYTHONPATH="/workspace"
ENV RUST_BACKTRACE=1
ENV CI=true

# Create symlinks for convenience
RUN ln -sf /usr/bin/python3 /usr/bin/python && \
    ln -sf /usr/bin/lua5.4 /usr/bin/lua

# Install Python CI dependencies (fixes #142 - faker missing, #198 - pytest-asyncio missing)
RUN python3 -m pip install --no-cache-dir \
    faker pytest pytest-cov pytest-xdist pytest-asyncio \
    black isort flake8 pylint mypy \
    coverage bandit safety pip-audit

# Copy project files for dependency installation if they exist
# Note: Using RUN with shell to handle optional files
RUN true  # Placeholder for optional file copy
RUN if [ -f pyproject.toml ]; then pip install -e ".[dev,test]" || true; fi

# Create health check script if it doesn't exist
RUN mkdir -p /usr/local/bin && \
    echo '#!/bin/bash' > /usr/local/bin/health-checks.sh && \
    echo 'set -e' >> /usr/local/bin/health-checks.sh && \
    echo 'echo "=== Health Check: All Toolchains ==="' >> /usr/local/bin/health-checks.sh && \
    echo 'python3 --version' >> /usr/local/bin/health-checks.sh && \
    echo 'cargo --version' >> /usr/local/bin/health-checks.sh && \
    echo 'lua --version' >> /usr/local/bin/health-checks.sh && \
    echo 'protoc --version' >> /usr/local/bin/health-checks.sh && \
    echo 'echo "All toolchains available!"' >> /usr/local/bin/health-checks.sh && \
    chmod +x /usr/local/bin/health-checks.sh

# Default command runs health check
CMD ["/usr/local/bin/health-checks.sh"]

# Labels for CI tracking
LABEL maintainer="spencerduncan"
LABEL version="1.0"
LABEL description="Unified CI image with Python, Rust, Lua toolchains"