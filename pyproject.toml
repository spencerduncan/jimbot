[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jimbot"
version = "0.1.0"
description = "Sequential learning system for mastering Balatro using ML and AI"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "JimBot Team", email = "noreply@jimbot.ai"},
]
keywords = ["balatro", "machine-learning", "reinforcement-learning", "ray", "memgraph"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Games/Entertainment :: Arcade",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core ML/AI
    "ray[default,tune]>=2.9.0",
    "torch>=2.0.1",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    
    # LLM Integration
    "langchain>=0.1.0",
    "anthropic>=0.8.0",
    
    # Async and networking
    "aiohttp>=3.9.0",
    "websockets>=12.0",
    "asyncio-throttle>=1.0.2",
    
    # Database clients
    "redis>=5.0.0",
    "pymemgraph>=1.0.0",
    "psycopg2-binary>=2.9.0",  # For QuestDB
    
    # Utilities
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    
    # Monitoring
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
]

[project.optional-dependencies]
dev = [
    # Formatting
    "black==23.12.1",
    "isort==5.13.2",
    "ruff==0.1.11",
    
    # Linting
    "flake8==7.0.0",
    "flake8-docstrings==1.7.0",
    "flake8-bugbear==24.1.17",
    "flake8-comprehensions==3.14.0",
    "flake8-simplify==0.21.0",
    "mypy==1.8.0",
    "pylint==3.0.3",
    "pydocstyle==6.3.0",
    
    # Testing
    "pytest==7.4.4",
    "pytest-asyncio==0.23.3",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "pytest-timeout==2.2.0",
    "pytest-benchmark==4.0.0",
    "pytest-xdist==3.5.0",
    "coverage[toml]==7.4.0",
    "hypothesis==6.135.26",
    "faker==22.2.0",
    
    # Type stubs
    "types-redis==4.6.0.20240106",
    "types-requests==2.31.0.20240106",
    "types-PyYAML==6.0.12.12",
    "types-protobuf==4.24.0.4",
    
    # Security
    "bandit==1.7.6",
    "safety==3.0.1",
    "pip-audit==2.6.3",
    
    # Documentation
    "sphinx==7.2.6",
    "sphinx-autodoc-typehints==1.25.2",
    "sphinx-rtd-theme==2.0.0",
    
    # Development tools
    "ipython==8.19.0",
    "ipdb==0.13.13",
    "pre-commit==3.6.0",
    
    # Performance profiling
    "py-spy==0.3.14",
    "memory-profiler==0.61.0",
    "line-profiler==4.1.2",
    "scalene==1.5.38",
    
    # ML/Notebook tools
    "nbqa==1.7.1",
    "nbstripout==0.6.1",
    "tensorboard>=2.14.0",
]

test = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "hypothesis>=6.96.1",
]

docs = [
    "sphinx>=7.2.6",
    "sphinx-autodoc-typehints>=1.25.2",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]

[project.scripts]
jimbot = "jimbot.cli:main"
jimbot-mcp = "jimbot.mcp.server:main"
jimbot-train = "jimbot.training.run:main"

[project.urls]
Homepage = "https://github.com/spencerduncan/jimbot"
Documentation = "https://jimbot.readthedocs.io"
Repository = "https://github.com/spencerduncan/jimbot"
Issues = "https://github.com/spencerduncan/jimbot/issues"

# Tool configurations

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
  | venv
  | __pycache__
  | docs/conf.py
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["jimbot"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_gitignore = true
skip = [".git", "__pycache__", ".venv", "venv", "build", "dist"]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "ray.*",
    "langchain.*",
    "memgraph.*",
    "anthropic.*",
    "torch.*",
    "numpy.*",
    "pandas.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
    -ra
    -q
    --strict-markers
    --cov=jimbot
    --cov-report=html
    --cov-report=term
    --cov-report=xml
    --cov-fail-under=0
    --maxfail=1
    --tb=short
"""
testpaths = ["jimbot/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["jimbot"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PL",   # pylint
    "TRY",  # tryceratops
    "NPY",  # NumPy-specific rules
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E203",   # whitespace before ':'
    "E501",   # line too long (handled by black)
    "ANN101", # missing type annotation for self
    "ANN102", # missing type annotation for cls
    "S101",   # use of assert detected
    "PLR0913", # too many arguments
]
unfixable = ["B"]
exclude = [
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ANN"]
"__init__.py" = ["F401"]
"docs/*" = ["ALL"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.pydocstyle]
convention = "google"

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D105", "D107"]
match = "(?!test_).*\\\\.py"
match-dir = "(?!tests|migrations|__pycache__|venv|\\\\.venv|build|dist).*"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]
tests = ["B201", "B301"]
severity = "medium"

[tool.pylint.messages_control]
disable = [
    "C0330", "C0326",  # Bad continuation
    "C0103",  # Invalid name
    "C0111",  # Missing docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Access to protected member
    "W0622",  # Redefining built-in
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "x", "y", "z", "df"]

[tool.pylint.design]
max-args = 8
max-attributes = 12
max-locals = 20