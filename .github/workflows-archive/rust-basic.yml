name: Rust Basic CI

on:
  push:
    branches: [main]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/*.rs'
      - '.github/workflows/rust-basic.yml'
  pull_request:
    branches: [main]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/*.rs'
      - '.github/workflows/rust-basic.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  detect-rust:
    name: Detect Rust Code
    runs-on: ubuntu-latest
    outputs:
      has-rust: ${{ steps.detect.outputs.has-rust }}
      rust-dirs: ${{ steps.detect.outputs.rust-dirs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect Rust components
        id: detect
        run: |
          # Find all Cargo.toml files (excluding target directories and node_modules)
          RUST_DIRS=$(find . -name "Cargo.toml" -not -path "./target/*" -not -path "*/target/*" -not -path "./node_modules/*" -not -path "*/node_modules/*" | while read -r cargo_file; do
            dirname "$cargo_file"
          done | sort -u)
          
          if [ -n "$RUST_DIRS" ]; then
            echo "has-rust=true" >> $GITHUB_OUTPUT
            # Convert to JSON array for matrix
            RUST_DIRS_JSON=$(echo "$RUST_DIRS" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "rust-dirs=$RUST_DIRS_JSON" >> $GITHUB_OUTPUT
            echo "Found Rust directories: $RUST_DIRS"
          else
            echo "has-rust=false" >> $GITHUB_OUTPUT
            echo "rust-dirs=[]" >> $GITHUB_OUTPUT
            echo "No Rust code found in repository"
          fi

  check:
    name: Rust CI
    runs-on: ubuntu-latest
    needs: detect-rust
    if: needs.detect-rust.outputs.has-rust == 'true'
    strategy:
      matrix:
        rust-dir: ${{ fromJson(needs.detect-rust.outputs.rust-dirs) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ matrix.rust-dir }}
          cache-on-failure: true

      - name: Check formatting
        working-directory: ${{ matrix.rust-dir }}
        run: cargo fmt --all -- --check

      - name: Run Clippy lints
        working-directory: ${{ matrix.rust-dir }}
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        working-directory: ${{ matrix.rust-dir }}
        run: cargo test --all-features --workspace

      - name: Check for build warnings
        working-directory: ${{ matrix.rust-dir }}
        run: cargo check --all-targets --all-features
