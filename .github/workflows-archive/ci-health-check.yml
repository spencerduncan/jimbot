name: CI Health Monitor

on:
  schedule:
    # Run every hour to monitor CI health
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual triggering
  
env:
  HEALTH_CHECK_LOOKBACK_HOURS: 24

jobs:
  ci-health-check:
    name: CI Health Monitor
    runs-on: ubuntu-latest
    permissions:
      actions: read
      issues: write
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          pip install aiohttp asyncio
          
      - name: Check CI Health with Enhanced Monitoring
        id: health_check
        run: |
          echo "Running enhanced CI health monitoring..."
          
          # Run the enhanced CI status reporter
          python scripts/ci-status-report.py > ci-health-output.txt 2>&1
          
          # Parse the output for GitHub Actions
          if grep -q "Overall Status: HEALTHY" ci-health-output.txt; then
            echo "health_status=healthy" >> $GITHUB_OUTPUT
            echo "health_color=green" >> $GITHUB_OUTPUT
          elif grep -q "Overall Status: DEGRADED" ci-health-output.txt; then
            echo "health_status=degraded" >> $GITHUB_OUTPUT
            echo "health_color=yellow" >> $GITHUB_OUTPUT
          else
            echo "health_status=unhealthy" >> $GITHUB_OUTPUT
            echo "health_color=red" >> $GITHUB_OUTPUT
          fi
          
          # Extract success rate from the output
          success_rate=$(grep -o "Success Rate: [0-9.]*%" ci-health-output.txt | grep -o "[0-9.]*" | head -1)
          if [ -z "$success_rate" ]; then
            success_rate="0"
          fi
          
          # Extract run counts
          total_runs=$(grep -o "([0-9]*/[0-9]* runs)" ci-health-output.txt | grep -o "[0-9]*/[0-9]*" | cut -d'/' -f2 | head -1)
          success_runs=$(grep -o "([0-9]*/[0-9]* runs)" ci-health-output.txt | grep -o "[0-9]*/[0-9]*" | cut -d'/' -f1 | head -1)
          
          if [ -z "$total_runs" ]; then
            total_runs="0"
          fi
          if [ -z "$success_runs" ]; then
            success_runs="0"
          fi
          
          echo "total_runs=$total_runs" >> $GITHUB_OUTPUT
          echo "success_runs=$success_runs" >> $GITHUB_OUTPUT
          echo "success_rate=${success_rate%.*}" >> $GITHUB_OUTPUT
          
          # Display the full report
          cat ci-health-output.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Enhanced CI Health Artifacts
        run: |
          mkdir -p .github/badges
          mkdir -p ci-reports
          
          # Create enhanced badge JSON for shields.io
          cat > .github/badges/ci-health.json << EOF
          {
            "schemaVersion": 1,
            "label": "CI Health",
            "message": "${{ steps.health_check.outputs.success_rate }}% (${{ steps.health_check.outputs.health_status }})",
            "color": "${{ steps.health_check.outputs.health_color }}"
          }
          EOF
          
          # Copy the detailed report if it exists
          if [ -f "ci-health-report.json" ]; then
            cp ci-health-report.json ci-reports/
            echo "Detailed CI health report saved to ci-reports/"
          fi
          
          echo "Created CI health badge with ${{ steps.health_check.outputs.success_rate }}% success rate"
          
      - name: Check for CI Issues
        if: steps.health_check.outputs.success_rate < 70
        run: |
          echo "::warning::CI success rate (${{ steps.health_check.outputs.success_rate }}%) is below 70%"
          echo "This indicates potential infrastructure issues that need attention."
          
          # Get details of recent failures
          echo "Recent failed runs:"
          gh run list --status failure --limit 5 --json workflowName,conclusion,createdAt,url | jq -r '.[] | "- \(.workflowName): \(.conclusion) at \(.createdAt) - \(.url)"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Issue for Critical CI Health
        if: steps.health_check.outputs.success_rate < 50
        run: |
          # Check if there's already an open issue about CI health
          existing_issue=$(gh issue list --label "infrastructure,critical" --state open --search "CI Health Critical" --json number | jq -r '.[0].number // empty')
          
          if [ -z "$existing_issue" ]; then
            # Create new issue
            gh issue create \
              --title "ğŸš¨ CI Health Critical: ${{ steps.health_check.outputs.success_rate }}% Success Rate" \
              --body "## CI Health Alert

            **Current Status**: ${{ steps.health_check.outputs.health_status }}
            **Success Rate**: ${{ steps.health_check.outputs.success_rate }}%
            **Total Runs (24h)**: ${{ steps.health_check.outputs.total_runs }}
            **Successful Runs**: ${{ steps.health_check.outputs.success_runs }}

            ## Impact
            CI success rate has fallen below 50%, indicating critical infrastructure issues.

            ## Immediate Actions Needed
            - [ ] Investigate recent build failures
            - [ ] Check for infrastructure dependency issues
            - [ ] Review workflow configurations
            - [ ] Monitor for service outages

            ## Recent Failed Runs
            \`\`\`
            $(gh run list --status failure --limit 5 --json workflowName,conclusion,createdAt | jq -r '.[] | \"- \(.workflowName): \(.conclusion) at \(.createdAt)\"')
            \`\`\`

            This issue was automatically created by CI Health Monitor.
            " \
              --label "infrastructure,critical,P0,devops" \
              --assignee spencerduncan
            
            echo "Created critical CI health issue"
          else
            echo "CI health issue #$existing_issue already exists"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update Repository Status
        run: |
          echo "CI Health Check completed:"
          echo "- Status: ${{ steps.health_check.outputs.health_status }}"
          echo "- Success Rate: ${{ steps.health_check.outputs.success_rate }}%"
          echo "- Badge updated in .github/badges/ci-health.json"