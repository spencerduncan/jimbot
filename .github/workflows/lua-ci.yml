# Lua CI Pipeline - Docker-based Lua testing environment
# Part of Sprint 2.4: Migrate Lua test suite to Docker environment

name: Lua CI

on:
  push:
    branches: [main, develop, 'feature/**', 'sprint/**']
    paths:
      - 'tests/**'
      - 'mods/**/*.lua'
      - 'docker/Dockerfile.lua-test'
      - 'docker/docker-compose.lua-test.yml'
      - '.luacheckrc'
      - '.stylua.toml'
      - '.github/workflows/lua-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'tests/**'
      - 'mods/**/*.lua'
      - 'docker/Dockerfile.lua-test'
      - 'docker/docker-compose.lua-test.yml'
      - '.luacheckrc'
      - '.stylua.toml'
      - '.github/workflows/lua-ci.yml'

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lua-test-matrix:
    name: Lua Tests (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        test-type:
          - standard
          - coverage
          - performance
        include:
          - test-type: standard
            description: "Standard Lua testing suite"
            coverage: false
            performance: false
          - test-type: coverage
            description: "Lua testing with coverage reporting"
            coverage: true
            performance: false
          - test-type: performance
            description: "Lua performance testing"
            coverage: false
            performance: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better coverage reports
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-lua-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-lua-
      
      - name: Build Lua test image
        run: |
          echo "Building Docker image for Lua testing..."
          docker-compose -f docker/docker-compose.lua-test.yml build lua-test
          
          echo "Verifying image was built..."
          docker images | grep lua-test || {
            echo "Error: Lua test image not found"
            exit 1
          }
      
      - name: Run ${{ matrix.description }}
        run: |
          echo "Running ${{ matrix.description }}"
          
          # Set test parameters
          COVERAGE_FLAG=""
          PERFORMANCE_FLAG=""
          
          if [[ "${{ matrix.coverage }}" == "true" ]]; then
            COVERAGE_FLAG="--coverage"
          fi
          
          if [[ "${{ matrix.performance }}" == "true" ]]; then
            PERFORMANCE_FLAG="--performance"
          fi
          
          # Run the tests
          bash ci/scripts/run-lua-tests.sh $COVERAGE_FLAG $PERFORMANCE_FLAG
      
      - name: Upload coverage reports
        if: matrix.coverage == true
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lua/lcov.info
          flags: lua
          name: lua-coverage
          fail_ci_if_error: false
          verbose: true
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lua-test-results-${{ matrix.test-type }}
          path: |
            coverage/
            *.log
            luacov.report.out
          retention-days: 30
          if-no-files-found: ignore
      
      - name: Performance summary
        if: matrix.performance == true
        run: |
          echo "## Lua Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Performance testing completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "Check the logs above for detailed timing information." >> $GITHUB_STEP_SUMMARY

  lua-integration-test:
    name: Lua Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lua-test-matrix
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Test Docker Compose configuration
        run: |
          echo "Testing Docker Compose configuration..."
          
          # Validate compose file
          docker-compose -f docker/docker-compose.lua-test.yml config > /tmp/compose-config.yml
          
          echo "Compose file is valid:"
          head -20 /tmp/compose-config.yml
      
      - name: Test development environment
        run: |
          echo "Testing development environment setup..."
          
          # Build and start dev environment
          docker-compose -f docker/docker-compose.lua-test.yml build lua-test-dev
          
          # Test that dev environment can be started
          docker-compose -f docker/docker-compose.lua-test.yml run --rm -d lua-test-dev tail -f /dev/null
          
          echo "Development environment test completed successfully"
      
      - name: Test all profiles
        run: |
          echo "Testing all Docker Compose profiles..."
          
          # Test base profile
          docker-compose -f docker/docker-compose.lua-test.yml run --rm lua-test echo "Base profile works"
          
          # Test dev profile
          docker-compose -f docker/docker-compose.lua-test.yml --profile dev run --rm lua-test-dev echo "Dev profile works"
          
          # Test coverage profile
          docker-compose -f docker/docker-compose.lua-test.yml --profile coverage run --rm lua-test-coverage echo "Coverage profile works"
          
          # Test performance profile
          docker-compose -f docker/docker-compose.lua-test.yml --profile perf run --rm lua-test-perf echo "Performance profile works"
          
          echo "All profiles tested successfully"
      
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up Docker resources..."
          docker-compose -f docker/docker-compose.lua-test.yml down -v --remove-orphans 2>/dev/null || true
          docker system prune -f || true

  lua-test-summary:
    name: Lua Test Summary
    runs-on: ubuntu-latest
    needs: [lua-test-matrix, lua-integration-test]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "# Lua CI Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if tests passed
          if [[ "${{ needs.lua-test-matrix.result }}" == "success" ]]; then
            echo "✅ **Lua Test Matrix**: All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Lua Test Matrix**: Tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.lua-integration-test.result }}" == "success" ]]; then
            echo "✅ **Integration Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Integration Tests**: Tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Docker Environment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Lua Test Image**: Built and tested successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Compose**: Configuration validated" >> $GITHUB_STEP_SUMMARY
          echo "- **All Profiles**: Tested and working" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage and Performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage Reports**: Generated and uploaded" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests**: Completed with timing data" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Docker-based Lua testing environment is now fully operational* 🚀" >> $GITHUB_STEP_SUMMARY