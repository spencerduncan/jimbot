# CI Test Suite - Comprehensive testing across all components
name: CI Test Suite

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]

jobs:
  test-matrix:
    name: ${{ matrix.component }} Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        component: [python, rust, lua]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build CI Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.ci-unified
          target: ci
          tags: jimbot-ci:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          
      - name: Run ${{ matrix.component }} Tests
        run: |
          case '${{ matrix.component }}' in
            python)
              docker run --rm -v ${{ github.workspace }}:/workspace jimbot-ci:latest bash -c "
                echo '=== Running Python Tests ==='
                cd /workspace
                if [ -f ci/scripts/run-python-tests.sh ]; then
                  bash ci/scripts/run-python-tests.sh
                else
                  pytest jimbot/tests/unit -v --cov=jimbot --cov-report=xml || true
                fi
              "
              ;;
            rust)
              docker run --rm -v ${{ github.workspace }}:/workspace jimbot-ci:latest bash -c "
                echo '=== Running Rust Tests ==='
                cd /workspace
                if [ -f ci/scripts/run-rust-tests.sh ]; then
                  bash ci/scripts/run-rust-tests.sh
                elif [ -f Cargo.toml ]; then
                  cargo test --all-features --verbose || true
                  cargo tarpaulin --out Xml --output-dir coverage || true
                else
                  echo 'No Rust components found'
                fi
              "
              ;;
            lua)
              # Run Lua tests using Docker-based environment
              echo '=== Running Lua Tests ==='
              if [ -f ci/scripts/run-lua-tests.sh ]; then
                bash ci/scripts/run-lua-tests.sh --coverage
              else
                echo 'Lua test script not found, using fallback'
                docker-compose -f docker/docker-compose.lua-test.yml run --rm lua-test-coverage || true
              fi
              ;;
          esac
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        if: matrix.component == 'python' || matrix.component == 'rust' || matrix.component == 'lua'
        with:
          files: ./coverage.xml,./coverage/lua/lcov.info
          flags: ${{ matrix.component }}
          fail_ci_if_error: false