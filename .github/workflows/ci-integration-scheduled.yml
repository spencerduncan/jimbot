name: Scheduled Integration Tests

on:
  schedule:
    # Run every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:  # Allow manual triggering

env:
  CREATE_GITHUB_ISSUES: false  # Disable automatic issue creation to prevent spam

jobs:
  integration-tests:
    name: Full Integration Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Cache Rust dependencies for scheduled tests
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            jimbot/memgraph/mage_modules -> target
            services/balatro-emulator -> target
            services/event-bus-rust -> target
            jimbot/infrastructure/resource_coordinator_rust -> target
          cache-on-failure: true
          shared-key: "rust-ci-scheduled"
          save-if: ${{ github.ref == 'refs/heads/main' }}
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Build CI Docker image
        run: |
          docker build -f docker/Dockerfile.ci-unified -t jimbot-ci:latest .
      
      - name: Start All Services
        run: |
          # Use the fixed docker-compose.ci.yml
          if [ -f docker-compose.ci.yml ]; then
            docker compose -f docker-compose.ci.yml up -d
          else
            echo "docker-compose.ci.yml not found, skipping service startup"
          fi
          
      - name: Wait for Services
        run: |
          echo "Waiting for services to be healthy..."
          for i in {1..60}; do
            if docker ps | grep -q healthy; then
              echo "Services are healthy!"
              break
            fi
            echo "Waiting for services... ($i/60)"
            sleep 5
          done
          docker ps

      - name: Run full integration test suite
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/workspace \
            -v $HOME/.cargo/registry:/root/.cargo/registry \
            -v $HOME/.cargo/git:/root/.cargo/git \
            -e CI=true \
            -e PYTHONPATH=/workspace \
            -e QUESTDB_HOST=localhost \
            -e MEMGRAPH_HOST=localhost \
            jimbot-ci:latest bash -c "
              echo '=== Full Integration Test Suite ==='
              cd /workspace
              
              # Python integration tests
              if [ -d jimbot/tests/integration ]; then
                echo '--- Python Integration Tests ---'
                pytest jimbot/tests/integration -v --cov=jimbot/integration --cov-report=xml:coverage/integration-python.xml || true
              fi
              
              # Rust integration tests
              if [ -f Cargo.toml ]; then
                echo '--- Rust Integration Tests ---'
                cargo test --test '*integration*' -- --test-threads=1 || true
              fi
              
              # Service-specific integration tests
              for service in services/*/; do
                if [ -f \"\$service/Cargo.toml\" ]; then
                  echo \"--- Testing \$(basename \$service) Integration ---\"
                  cd \$service
                  cargo test --verbose --test '*integration*' || true
                  cd /workspace
                fi
              done
              
              # Cross-service integration tests
              if [ -f ci/scripts/run-integration-tests.sh ]; then
                echo '--- Cross-Service Integration Tests ---'
                bash ci/scripts/run-integration-tests.sh
              fi
              
              echo 'Integration tests completed!'
            "
      
      - name: Collect Logs
        if: always()
        run: |
          mkdir -p logs
          docker compose -f docker-compose.ci.yml logs > logs/docker-compose.log 2>&1 || true
          docker ps -a > logs/containers.log || true
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ github.run_number }}
          path: |
            services/*/target/debug/deps/*.json
            services/*/test-results/
            **/test-results/
            coverage/
            logs/
          retention-days: 14
          
      - name: Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.ci.yml down -v || true
          docker system prune -f || true
      
  notify-failures:
    name: Notify on Failures
    needs: integration-tests
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Check for existing issue or create new one
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Check if issue creation is disabled
            if (process.env.CREATE_GITHUB_ISSUES === 'false') {
              console.log('Issue creation is disabled via CREATE_GITHUB_ISSUES environment variable');
              return;
            }
            
            // Check for existing open issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure,integration-tests',
              per_page: 100
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Scheduled Integration Tests Failed')
            );
            
            const date = new Date().toISOString();
            const workflowUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            if (existingIssue) {
              // Update existing issue
              console.log(`Found existing issue #${existingIssue.number}, updating it`);
              
              // Add comment to existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `ðŸ”´ Integration tests failed again at ${date}\n\nWorkflow run: ${workflowUrl}`
              });
              
              // Update issue body with latest failure
              const currentBody = existingIssue.body || '';
              const updateSection = `\n\n---\n\n## Update - ${date}\n\nTests failed again. Latest workflow run: ${workflowUrl}`;
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: currentBody + updateSection
              });
              
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Scheduled Integration Tests Failed - ${date}`,
                body: `The scheduled integration tests failed at ${date}.\n\nWorkflow run: ${workflowUrl}\n\n## Details\n\nThis issue will be automatically updated if the tests continue to fail. Once the tests pass, please close this issue.`,
                labels: ['bug', 'ci-failure', 'integration-tests']
              });
              console.log(`Created issue #${issue.data.number}`);
            }