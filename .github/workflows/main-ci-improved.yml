name: Improved CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Centralized tool versions
  PYTHON_VERSION: "3.10"
  NODE_VERSION: "18"
  GO_VERSION: "1.21"
  LUA_VERSION: "5.4"
  STYLUA_VERSION: "v0.20.0"
  BUF_VERSION: "v1.28.1"
  CMAKE_VERSION: "3.25.0"
  PROTOC_VERSION: "3.21.12"
  
  # Retry configuration
  MAX_RETRIES: 3
  RETRY_DELAY: 5
  
  # Monitoring
  CI_RUN_ID: ${{ github.run_id }}-${{ github.run_attempt }}
  METRICS_FILE: ci-metrics.json

jobs:
  # Pre-flight health check
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    outputs:
      disk_space: ${{ steps.check.outputs.disk_space }}
      memory: ${{ steps.check.outputs.memory }}
      network: ${{ steps.check.outputs.network }}
      timestamp: ${{ steps.check.outputs.timestamp }}
    steps:
      - name: Check system resources
        id: check
        run: |
          echo "::group::System Health Check"
          START_TIME=$(date +%s)
          
          # Check disk space
          DISK_SPACE=$(df -h / | tail -1 | awk '{print $4}' | sed 's/G//')
          echo "disk_space=$DISK_SPACE" >> $GITHUB_OUTPUT
          if (( $(echo "$DISK_SPACE < 10" | bc -l) )); then
            echo "::warning::Low disk space: ${DISK_SPACE}GB available"
          fi
          
          # Check memory
          MEMORY=$(free -g | grep Mem | awk '{print $7}')
          echo "memory=$MEMORY" >> $GITHUB_OUTPUT
          if [ "$MEMORY" -lt 4 ]; then
            echo "::warning::Low memory: ${MEMORY}GB available"
          fi
          
          # Check network connectivity
          NETWORK="ok"
          for site in github.com pypi.org registry.npmjs.org; do
            if ! curl -s --head --max-time 5 "https://$site" > /dev/null; then
              NETWORK="degraded"
              echo "::warning::Cannot reach $site"
            fi
          done
          echo "network=$NETWORK" >> $GITHUB_OUTPUT
          
          # Record timestamp
          echo "timestamp=$START_TIME" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: Generate health report
        run: |
          cat > health-report.json <<EOF
          {
            "run_id": "${{ env.CI_RUN_ID }}",
            "timestamp": "${{ steps.check.outputs.timestamp }}",
            "resources": {
              "disk_space_gb": ${{ steps.check.outputs.disk_space }},
              "memory_gb": ${{ steps.check.outputs.memory }},
              "network": "${{ steps.check.outputs.network }}"
            }
          }
          EOF
          
      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: health-report.json
          retention-days: 7

  # Tool installation with retry logic and fallbacks
  setup-tools:
    name: Setup CI Tools
    runs-on: ubuntu-latest
    needs: health-check
    continue-on-error: true
    outputs:
      tools_status: ${{ steps.summary.outputs.status }}
    steps:
      - uses: actions/checkout@v4
        
      - name: Create tool versions file
        run: |
          cat > .github/tool-versions.yml <<EOF
          python: "${{ env.PYTHON_VERSION }}"
          node: "${{ env.NODE_VERSION }}"
          go: "${{ env.GO_VERSION }}"
          lua: "${{ env.LUA_VERSION }}"
          stylua: "${{ env.STYLUA_VERSION }}"
          buf: "${{ env.BUF_VERSION }}"
          cmake: "${{ env.CMAKE_VERSION }}"
          protoc: "${{ env.PROTOC_VERSION }}"
          
          python_packages:
            black: "24.3.0"
            isort: "5.13.2"
            flake8: "7.0.0"
            mypy: "1.8.0"
            pylint: "3.0.3"
            bandit: "1.7.7"
            safety: "3.0.1"
            pytest: "8.0.0"
            pytest-cov: "4.1.0"
            
          lua_packages:
            luacheck: "1.1.1"
            busted: "2.2.0"
            luacov: "0.15.0"
          EOF
          
      - name: Setup Python with retry
        id: setup-python
        run: |
          source .github/workflows/scripts/retry.sh || true
          retry_command "echo 'Python setup would go here'" "Python setup"
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install Python tools with fallback
        id: python-tools
        run: |
          echo "::group::Installing Python tools"
          TOOLS_STATUS="success"
          
          # Try to install from requirements file first
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt || {
              echo "::warning::Failed to install from requirements-dev.txt"
              TOOLS_STATUS="partial"
            }
          fi
          
          # Install individual tools with error handling
          for tool in black isort flake8 mypy pylint bandit safety pytest pytest-cov; do
            echo "Installing $tool..."
            pip install "$tool" || {
              echo "::warning::Failed to install $tool"
              TOOLS_STATUS="partial"
              echo "$tool=failed" >> tool-status.txt
            }
          done
          
          echo "status=$TOOLS_STATUS" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
      - name: Setup Lua environment
        id: lua-setup
        run: |
          echo "::group::Setting up Lua environment"
          sudo apt-get update || true
          sudo apt-get install -y lua5.4 luarocks || {
            echo "::error::Failed to install Lua"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 0
          }
          echo "status=success" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
      - name: Install Lua tools with retry
        id: lua-tools
        if: steps.lua-setup.outputs.status == 'success'
        run: |
          echo "::group::Installing Lua tools"
          
          # Install StyLua with retry and fallback
          STYLUA_INSTALLED=false
          for i in $(seq 1 ${{ env.MAX_RETRIES }}); do
            echo "Attempting to download StyLua (attempt $i/${{ env.MAX_RETRIES }})..."
            if wget -q "https://github.com/JohnnyMorganz/StyLua/releases/download/${{ env.STYLUA_VERSION }}/stylua-linux-x86_64.zip"; then
              unzip -q stylua-linux-x86_64.zip
              sudo mv stylua /usr/local/bin/
              STYLUA_INSTALLED=true
              break
            fi
            sleep ${{ env.RETRY_DELAY }}
          done
          
          if [ "$STYLUA_INSTALLED" = false ]; then
            echo "::warning::Failed to install StyLua after ${{ env.MAX_RETRIES }} attempts"
            echo "stylua=failed" >> tool-status.txt
          fi
          
          # Install other Lua tools
          sudo luarocks install luacheck || echo "luacheck=failed" >> tool-status.txt
          sudo luarocks install busted || echo "busted=failed" >> tool-status.txt
          
          echo "::endgroup::"
          
      - name: Generate tools summary
        id: summary
        if: always()
        run: |
          echo "::group::Tools Installation Summary"
          
          # Aggregate status
          if [ -f tool-status.txt ]; then
            FAILED_TOOLS=$(grep "=failed" tool-status.txt | cut -d= -f1 | tr '\n' ', ')
            echo "::warning::Failed to install tools: ${FAILED_TOOLS%, }"
            echo "status=degraded" >> $GITHUB_OUTPUT
          else
            echo "All tools installed successfully"
            echo "status=success" >> $GITHUB_OUTPUT
          fi
          
          # Generate report
          cat > tools-report.json <<EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "python_tools": "${{ steps.python-tools.outputs.status }}",
            "lua_tools": "${{ steps.lua-tools.outputs.status }}",
            "failed_tools": "$(cat tool-status.txt 2>/dev/null || echo 'none')"
          }
          EOF
          
          echo "::endgroup::"
          
      - name: Upload tools report
        uses: actions/upload-artifact@v4
        with:
          name: tools-report
          path: tools-report.json
          retention-days: 7

  # Format check with graceful degradation
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    needs: [health-check, setup-tools]
    if: always()
    continue-on-error: true
    outputs:
      status: ${{ steps.aggregate.outputs.status }}
      report: ${{ steps.aggregate.outputs.report }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Pre-flight check
        id: preflight
        run: |
          echo "::group::Format Check Pre-flight"
          
          # Check if we have the tools we need
          READY=true
          MISSING_TOOLS=""
          
          # Check Python formatter
          if ! command -v black &> /dev/null && ! pip show black &> /dev/null; then
            MISSING_TOOLS="${MISSING_TOOLS}black "
            READY=false
          fi
          
          # Record status
          echo "ready=$READY" >> $GITHUB_OUTPUT
          echo "missing_tools=$MISSING_TOOLS" >> $GITHUB_OUTPUT
          
          if [ "$READY" = false ]; then
            echo "::warning::Missing tools for format check: $MISSING_TOOLS"
          fi
          
          echo "::endgroup::"
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install formatters with fallback
        run: |
          echo "::group::Installing formatters"
          
          # Install Python formatters
          pip install black isort || {
            echo "::warning::Failed to install Python formatters"
            echo "python_formatters=failed" >> format-status.txt
          }
          
          # Install Lua formatter with retry
          if [ "${{ steps.preflight.outputs.ready }}" = "true" ] || [ -z "${{ steps.preflight.outputs.missing_tools }}" ]; then
            for i in $(seq 1 ${{ env.MAX_RETRIES }}); do
              if wget -q "https://github.com/JohnnyMorganz/StyLua/releases/download/${{ env.STYLUA_VERSION }}/stylua-linux-x86_64.zip"; then
                unzip -q stylua-linux-x86_64.zip && sudo mv stylua /usr/local/bin/
                break
              fi
              sleep ${{ env.RETRY_DELAY }}
            done || echo "stylua=failed" >> format-status.txt
          fi
          
          echo "::endgroup::"
          
      - name: Run Python formatting check
        id: python-format
        continue-on-error: true
        run: |
          echo "::group::Python Format Check"
          START_TIME=$(date +%s)
          
          if command -v black &> /dev/null; then
            black --check jimbot/ tests/ || {
              echo "::warning::Python formatting issues detected"
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "Python formatting check failed" >> format-errors.txt
            }
            
            isort --check-only jimbot/ tests/ || {
              echo "::warning::Import sorting issues detected"
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "Import sorting check failed" >> format-errors.txt
            }
          else
            echo "::warning::Black not available, skipping Python format check"
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi
          
          END_TIME=$(date +%s)
          echo "duration=$((END_TIME - START_TIME))" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
      - name: Run Lua formatting check
        id: lua-format
        continue-on-error: true
        run: |
          echo "::group::Lua Format Check"
          START_TIME=$(date +%s)
          
          if command -v stylua &> /dev/null; then
            find . -name "*.lua" -type f | xargs stylua --check || {
              echo "::warning::Lua formatting issues detected"
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "Lua formatting check failed" >> format-errors.txt
            }
          else
            echo "::warning::StyLua not available, skipping Lua format check"
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi
          
          END_TIME=$(date +%s)
          echo "duration=$((END_TIME - START_TIME))" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
      - name: Aggregate results
        id: aggregate
        if: always()
        run: |
          echo "::group::Format Check Summary"
          
          # Determine overall status
          if [ -f format-errors.txt ]; then
            STATUS="failed"
            ERRORS=$(cat format-errors.txt | tr '\n' '; ')
          elif [ "${{ steps.python-format.outputs.status }}" = "skipped" ] || [ "${{ steps.lua-format.outputs.status }}" = "skipped" ]; then
            STATUS="degraded"
            ERRORS="Some format checks were skipped"
          else
            STATUS="success"
            ERRORS="none"
          fi
          
          # Generate report
          cat > format-report.json <<EOF
          {
            "run_id": "${{ env.CI_RUN_ID }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "status": "$STATUS",
            "checks": {
              "python": {
                "status": "${{ steps.python-format.outputs.status }}",
                "duration": ${{ steps.python-format.outputs.duration || 0 }}
              },
              "lua": {
                "status": "${{ steps.lua-format.outputs.status }}",
                "duration": ${{ steps.lua-format.outputs.duration || 0 }}
              }
            },
            "errors": "$ERRORS"
          }
          EOF
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "report=format-report.json" >> $GITHUB_OUTPUT
          
          # Display summary
          if [ "$STATUS" = "failed" ]; then
            echo "::error::Format check failed. Run 'make format' to fix issues."
          elif [ "$STATUS" = "degraded" ]; then
            echo "::warning::Format check completed with warnings"
          else
            echo "✅ All format checks passed"
          fi
          
          echo "::endgroup::"
          
      - name: Upload format report
        uses: actions/upload-artifact@v4
        with:
          name: format-report
          path: format-report.json
          retention-days: 7

  # Lint check with resilience
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    needs: [health-check, format-check]
    if: always() && needs.format-check.outputs.status != 'failed'
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        component: [python, lua, cpp]
    outputs:
      status: ${{ steps.aggregate.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          echo "::group::Setting up ${{ matrix.component }} lint environment"
          
          case "${{ matrix.component }}" in
            python)
              # Setup Python
              echo "Setting up Python environment"
              ;;
            lua)
              # Setup Lua
              sudo apt-get update && sudo apt-get install -y lua5.4 luarocks || true
              ;;
            cpp)
              # Setup C++
              sudo apt-get update && sudo apt-get install -y clang-format-15 clang-tidy-15 cppcheck || true
              ;;
          esac
          
          echo "::endgroup::"
          
      - name: Setup Python
        if: matrix.component == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install linters
        id: install
        run: |
          echo "::group::Installing ${{ matrix.component }} linters"
          START_TIME=$(date +%s)
          
          case "${{ matrix.component }}" in
            python)
              pip install flake8 mypy pylint bandit safety || {
                echo "::warning::Failed to install some Python linters"
                echo "status=partial" >> $GITHUB_OUTPUT
              }
              ;;
            lua)
              sudo luarocks install luacheck || {
                echo "::warning::Failed to install luacheck"
                echo "status=failed" >> $GITHUB_OUTPUT
              }
              ;;
            cpp)
              # Already installed via apt
              echo "status=success" >> $GITHUB_OUTPUT
              ;;
          esac
          
          END_TIME=$(date +%s)
          echo "install_duration=$((END_TIME - START_TIME))" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
      - name: Run linters
        id: lint
        continue-on-error: true
        run: |
          echo "::group::Running ${{ matrix.component }} linters"
          START_TIME=$(date +%s)
          LINT_ERRORS=""
          
          case "${{ matrix.component }}" in
            python)
              # Run Python linters with individual error handling
              if command -v flake8 &> /dev/null; then
                flake8 jimbot/ tests/ --count --statistics || LINT_ERRORS="${LINT_ERRORS}flake8 "
              fi
              
              if command -v mypy &> /dev/null; then
                mypy jimbot/ --ignore-missing-imports || LINT_ERRORS="${LINT_ERRORS}mypy "
              fi
              
              if command -v pylint &> /dev/null; then
                pylint jimbot/ --exit-zero || LINT_ERRORS="${LINT_ERRORS}pylint "
              fi
              
              if command -v bandit &> /dev/null; then
                bandit -r jimbot/ -f json -o bandit-report.json || LINT_ERRORS="${LINT_ERRORS}bandit "
              fi
              ;;
              
            lua)
              if command -v luacheck &> /dev/null; then
                find . -name "*.lua" -type f | xargs luacheck --formatter plain || LINT_ERRORS="${LINT_ERRORS}luacheck "
              else
                echo "::warning::luacheck not available"
                LINT_ERRORS="luacheck-unavailable"
              fi
              ;;
              
            cpp)
              if command -v cppcheck &> /dev/null; then
                find . -name "*.cpp" -o -name "*.h" | xargs cppcheck --enable=all --suppress=missingIncludeSystem || LINT_ERRORS="${LINT_ERRORS}cppcheck "
              fi
              ;;
          esac
          
          END_TIME=$(date +%s)
          echo "duration=$((END_TIME - START_TIME))" >> $GITHUB_OUTPUT
          
          if [ -n "$LINT_ERRORS" ]; then
            echo "errors=$LINT_ERRORS" >> $GITHUB_OUTPUT
            echo "status=failed" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi
          
          echo "::endgroup::"
          
      - name: Generate lint report
        id: report
        if: always()
        run: |
          cat > lint-${{ matrix.component }}-report.json <<EOF
          {
            "component": "${{ matrix.component }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "install_status": "${{ steps.install.outputs.status }}",
            "install_duration": ${{ steps.install.outputs.install_duration || 0 }},
            "lint_status": "${{ steps.lint.outputs.status }}",
            "lint_duration": ${{ steps.lint.outputs.duration || 0 }},
            "errors": "${{ steps.lint.outputs.errors || 'none' }}"
          }
          EOF
          
      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: lint-${{ matrix.component }}-report
          path: lint-${{ matrix.component }}-report.json
          retention-days: 7
          
      - name: Upload security reports
        if: matrix.component == 'python' && always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Aggregate all results
  aggregate-results:
    name: Aggregate CI Results
    runs-on: ubuntu-latest
    needs: [health-check, setup-tools, format-check, lint]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Generate final report
        run: |
          echo "::group::CI Pipeline Summary"
          
          # Aggregate all reports
          cat > ci-summary.json <<EOF
          {
            "run_id": "${{ env.CI_RUN_ID }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "jobs": {
              "health_check": {
                "status": "${{ needs.health-check.result }}",
                "disk_space_gb": ${{ needs.health-check.outputs.disk_space || 0 }},
                "memory_gb": ${{ needs.health-check.outputs.memory || 0 }},
                "network": "${{ needs.health-check.outputs.network || 'unknown' }}"
              },
              "setup_tools": {
                "status": "${{ needs.setup-tools.result }}",
                "tools_status": "${{ needs.setup-tools.outputs.tools_status || 'unknown' }}"
              },
              "format_check": {
                "status": "${{ needs.format-check.result }}",
                "check_status": "${{ needs.format-check.outputs.status || 'unknown' }}"
              },
              "lint": {
                "status": "${{ needs.lint.result }}"
              }
            }
          }
          EOF
          
          # Display summary
          echo "## CI Pipeline Summary"
          echo ""
          echo "| Job | Status |"
          echo "|-----|--------|"
          echo "| Health Check | ${{ needs.health-check.result }} |"
          echo "| Setup Tools | ${{ needs.setup-tools.result }} |"
          echo "| Format Check | ${{ needs.format-check.result }} |"
          echo "| Lint | ${{ needs.lint.result }} |"
          echo ""
          
          # Determine overall status
          if [ "${{ needs.format-check.result }}" = "failure" ] || [ "${{ needs.lint.result }}" = "failure" ]; then
            echo "::error::CI pipeline failed. Please fix the issues and try again."
            exit 1
          elif [ "${{ needs.setup-tools.result }}" = "failure" ]; then
            echo "::warning::Tool setup failed but pipeline continued in degraded mode"
          else
            echo "✅ CI pipeline completed successfully"
          fi
          
          echo "::endgroup::"
          
      - name: Upload final summary
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary
          path: ci-summary.json
          retention-days: 30
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('ci-summary.json', 'utf8'));
            
            let comment = '## CI Pipeline Results\n\n';
            comment += '| Job | Status |\n';
            comment += '|-----|--------|\n';
            
            for (const [job, details] of Object.entries(summary.jobs)) {
              const emoji = details.status === 'success' ? '✅' : 
                           details.status === 'failure' ? '❌' : '⚠️';
              comment += `| ${job.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} | ${emoji} ${details.status} |\n`;
            }
            
            if (summary.jobs.health_check.network === 'degraded') {
              comment += '\n⚠️ **Warning**: Network connectivity issues detected during CI run.\n';
            }
            
            if (summary.jobs.setup_tools.tools_status === 'degraded') {
              comment += '\n⚠️ **Warning**: Some tools failed to install. Check the logs for details.\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: comment
            });

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [aggregate-results]
    if: failure() && github.event_name == 'push'
    steps:
      - name: Send failure notification
        run: |
          echo "::error::CI pipeline failed on ${{ github.ref }}"
          # Add your notification logic here (Slack, email, etc.)

# Helper scripts embedded in the workflow
  create-retry-script:
    name: Create Retry Script
    runs-on: ubuntu-latest
    if: false  # This job creates the retry script but doesn't run
    steps:
      - name: Create retry.sh
        run: |
          mkdir -p .github/workflows/scripts
          cat > .github/workflows/scripts/retry.sh <<'EOF'
          #!/bin/bash
          
          # Retry a command with exponential backoff
          retry_command() {
            local command="$1"
            local description="${2:-command}"
            local max_attempts="${3:-$MAX_RETRIES}"
            local delay="${4:-$RETRY_DELAY}"
            
            local attempt=1
            while [ $attempt -le $max_attempts ]; do
              echo "Attempting $description (attempt $attempt/$max_attempts)..."
              
              if eval "$command"; then
                echo "✅ $description succeeded"
                return 0
              fi
              
              if [ $attempt -lt $max_attempts ]; then
                echo "⚠️ $description failed, retrying in ${delay}s..."
                sleep $delay
                delay=$((delay * 2))  # Exponential backoff
              fi
              
              attempt=$((attempt + 1))
            done
            
            echo "❌ $description failed after $max_attempts attempts"
            return 1
          }
          
          export -f retry_command
          EOF
          
          chmod +x .github/workflows/scripts/retry.sh