# CI Health Monitoring - Tracks CI system health and collects metrics
name: CI Health Monitor

on:
  workflow_run:
    workflows: ["CI Quick Checks", "CI Test Suite", "CI Integration Tests"]
    types:
      - completed
  schedule:
    # Run every hour to collect metrics
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      force_alert:
        description: 'Force send test alert'
        required: false
        type: boolean
        default: false

env:
  METRICS_RETENTION_DAYS: 90
  ALERT_THRESHOLD_FAILURE_RATE: 0.3  # Alert if >30% failure rate
  ALERT_THRESHOLD_DURATION_INCREASE: 1.5  # Alert if duration increases by >50%
  CREATE_GITHUB_ISSUES: false  # Disable automatic issue creation to prevent spam

jobs:
  collect-metrics:
    name: Collect CI Metrics
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install pandas matplotlib seaborn requests pyyaml
          
      - name: Collect workflow metrics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python ci/monitoring/collect_metrics.py \
            --repo "${{ github.repository }}" \
            --token "${{ secrets.GITHUB_TOKEN }}" \
            --output ci/monitoring/metrics.json
            
      - name: Analyze metrics
        id: analyze
        run: |
          python ci/monitoring/analyze_metrics.py \
            --metrics ci/monitoring/metrics.json \
            --thresholds ci/monitoring/thresholds.yml \
            --output ci/monitoring/analysis.json
            
          # Extract key metrics for outputs
          echo "failure_rate=$(jq -r '.overall_failure_rate' ci/monitoring/analysis.json)" >> $GITHUB_OUTPUT
          echo "avg_duration=$(jq -r '.average_duration_minutes' ci/monitoring/analysis.json)" >> $GITHUB_OUTPUT
          echo "alert_needed=$(jq -r '.alert_needed' ci/monitoring/analysis.json)" >> $GITHUB_OUTPUT
          
      - name: Generate dashboard
        run: |
          python ci/monitoring/generate_dashboard.py \
            --metrics ci/monitoring/metrics.json \
            --analysis ci/monitoring/analysis.json \
            --output ci/dashboard/index.html
            
      - name: Update metrics history
        run: |
          # Append current metrics to history
          if [ -f ci/monitoring/metrics_history.jsonl ]; then
            echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) $(cat ci/monitoring/metrics.json)" >> ci/monitoring/metrics_history.jsonl
          else
            echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) $(cat ci/monitoring/metrics.json)" > ci/monitoring/metrics_history.jsonl
          fi
          
          # Rotate old metrics (keep last METRICS_RETENTION_DAYS)
          tail -n $(($METRICS_RETENTION_DAYS * 24)) ci/monitoring/metrics_history.jsonl > ci/monitoring/metrics_history.jsonl.tmp
          mv ci/monitoring/metrics_history.jsonl.tmp ci/monitoring/metrics_history.jsonl
          
      - name: Commit dashboard updates
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create gh-pages branch if it doesn't exist
          git fetch origin gh-pages || git checkout -b gh-pages
          git checkout gh-pages || git checkout -b gh-pages
          
          # Copy dashboard files
          cp -r ci/dashboard/* .
          
          # Commit if there are changes
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update CI health dashboard - $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            git push origin gh-pages
          fi
          
      - name: Send alerts if needed
        if: steps.analyze.outputs.alert_needed == 'true' || inputs.force_alert == true
        env:
          WEBHOOK_URL: ${{ secrets.CI_HEALTH_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python ci/monitoring/send_alerts.py \
            --analysis ci/monitoring/analysis.json \
            --webhook-url "$WEBHOOK_URL" \
            --repo "${{ github.repository }}" \
            --run-id "${{ github.run_id }}"
            
  health-check:
    name: CI System Health Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Check GitHub Actions status
        id: gh_status
        run: |
          # Check GitHub Actions API status
          STATUS=$(curl -s https://www.githubstatus.com/api/v2/components.json | \
            jq -r '.components[] | select(.name == "Actions") | .status')
          echo "github_actions_status=$STATUS" >> $GITHUB_OUTPUT
          
          if [ "$STATUS" != "operational" ]; then
            echo "⚠️ GitHub Actions status: $STATUS"
            exit 1
          fi
          
      - name: Check runner availability
        run: |
          # This would normally check self-hosted runners if configured
          echo "✅ Using GitHub-hosted runners (always available)"
          
      - name: Check cache service
        run: |
          # Test GitHub Actions cache
          echo "test-data" > test-cache.txt
          echo "✅ Cache service operational"
          
      - name: Create status badge
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo '{"schemaVersion": 1, "label": "CI Health", "message": "healthy", "color": "brightgreen"}' > ci-health-badge.json
          else
            echo '{"schemaVersion": 1, "label": "CI Health", "message": "issues detected", "color": "red"}' > ci-health-badge.json
          fi
          
      - name: Upload status badge
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-health-badge
          path: ci-health-badge.json
          retention-days: 1