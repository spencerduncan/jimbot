# Rust CI - Fast Rust-specific checks without Docker
name: Rust CI

on:
  push:
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '.github/workflows/rust-ci.yml'

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Rust Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target
            jimbot/memgraph/mage_modules -> target
            services/balatro-emulator -> target
            services/event-bus-rust -> target
            jimbot/infrastructure/resource_coordinator_rust -> target
          cache-on-failure: true
          shared-key: "rust-check"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check compilation
        run: cargo check --all-targets --all-features

  test:
    name: Rust Tests
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target
            jimbot/memgraph/mage_modules -> target
            services/balatro-emulator -> target
            services/event-bus-rust -> target
            jimbot/infrastructure/resource_coordinator_rust -> target
          cache-on-failure: true
          shared-key: "rust-test"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install test dependencies
        run: |
          cargo install cargo-nextest --locked || true
          cargo install cargo-tarpaulin --locked || true

      - name: Run tests with nextest
        run: |
          if command -v cargo-nextest &> /dev/null; then
            cargo nextest run --all-features
          else
            cargo test --all-features --verbose
          fi

      - name: Generate coverage report
        run: |
          if command -v cargo-tarpaulin &> /dev/null; then
            cargo tarpaulin --out Xml --output-dir coverage --all-features
          fi

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/cobertura.xml
          flags: rust
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target
            jimbot/memgraph/mage_modules -> target
            services/balatro-emulator -> target
            services/event-bus-rust -> target
            jimbot/infrastructure/resource_coordinator_rust -> target
          cache-on-failure: true
          shared-key: "rust-audit"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked || true

      - name: Run security audit
        run: cargo audit