name: Rust CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/*.rs'
      - '.github/workflows/rust-ci-cd.yml'
      - '**/Dockerfile*'
  pull_request:
    branches: [main, develop]
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '**/*.rs'
      - '.github/workflows/rust-ci-cd.yml'
      - '**/Dockerfile*'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build all components'
        required: false
        default: false
        type: boolean
      release_type:
        description: 'Release type'
        required: false
        default: 'none'
        type: choice
        options:
          - none
          - patch
          - minor
          - major

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  # Docker registry configuration
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository }}/rust

jobs:
  detect-changes:
    name: Detect Rust Components
    runs-on: ubuntu-latest
    outputs:
      rust-components: ${{ steps.detect.outputs.components }}
      has-changes: ${{ steps.detect.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Rust components
        id: detect
        run: |
          # Find all Cargo.toml files (excluding target directories)
          COMPONENTS=$(find . -name "Cargo.toml" -not -path "./target/*" -not -path "*/target/*" | while read -r cargo_file; do
            component_dir=$(dirname "$cargo_file")
            component_name=$(basename "$component_dir")
            echo "$component_dir:$component_name"
          done | jq -R -s -c 'split("\n") | map(select(length > 0)) | map(split(":") | {path: .[0], name: .[1]})')

          echo "components=$COMPONENTS" >> $GITHUB_OUTPUT

          # Check if we have any Rust components
          if [ "$COMPONENTS" = "[]" ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No Rust components found"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Found Rust components: $COMPONENTS"
          fi

  rust-quality-checks:
    name: Rust Quality Checks
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        toolchain: [stable, nightly]
        component: ${{ fromJson(needs.detect-changes.outputs.rust-components) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ matrix.component.path }}
          key: ${{ matrix.toolchain }}-${{ matrix.component.name }}

      - name: Check formatting
        working-directory: ${{ matrix.component.path }}
        run: cargo fmt --all -- --check

      - name: Run Clippy
        working-directory: ${{ matrix.component.path }}
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build
        working-directory: ${{ matrix.component.path }}
        run: cargo build --verbose --all-features

      - name: Run tests
        working-directory: ${{ matrix.component.path }}
        run: cargo test --verbose --all-features

  rust-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        component: ${{ fromJson(needs.detect-changes.outputs.rust-components) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ matrix.component.path }}
          key: coverage-${{ matrix.component.name }}

      - name: Generate coverage report
        working-directory: ${{ matrix.component.path }}
        run: |
          cargo tarpaulin \
            --verbose \
            --all-features \
            --workspace \
            --timeout 120 \
            --out xml \
            --output-dir ./coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ${{ matrix.component.path }}/coverage/cobertura.xml
          flags: ${{ matrix.component.name }}
          name: ${{ matrix.component.name }}-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        component: ${{ fromJson(needs.detect-changes.outputs.rust-components) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ matrix.component.path }}
          key: audit-${{ matrix.component.name }}

      - name: Run security audit
        working-directory: ${{ matrix.component.path }}
        run: cargo audit

  docker-build:
    name: Docker Multi-Platform Build
    runs-on: ubuntu-latest
    needs: [detect-changes, rust-quality-checks]
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        component: ${{ fromJson(needs.detect-changes.outputs.rust-components) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.component.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Check for Dockerfile
        id: dockerfile
        run: |
          dockerfile_path="${{ matrix.component.path }}/Dockerfile"
          if [ -f "$dockerfile_path" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "path=$dockerfile_path" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No Dockerfile found for ${{ matrix.component.name }}"
          fi

      - name: Build and push Docker image
        if: steps.dockerfile.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component.path }}
          file: ${{ steps.dockerfile.outputs.path }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [rust-quality-checks, rust-coverage, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        component: ${{ fromJson(needs.detect-changes.outputs.rust-components) }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ matrix.component.path }}
          key: release-${{ matrix.component.name }}

      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Determine version bump
        id: version
        working-directory: ${{ matrix.component.path }}
        run: |
          # Get current version
          CURRENT_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[] | select(.name == "${{ matrix.component.name }}") | .version')
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Determine version bump based on commit messages
          BUMP_TYPE="patch"
          if git log --format=%B -n 50 | grep -q "BREAKING CHANGE\|feat!"; then
            BUMP_TYPE="minor"
          elif git log --format=%B -n 10 | grep -q "^feat"; then
            BUMP_TYPE="minor"
          fi

          echo "bump=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Create release
        working-directory: ${{ matrix.component.path }}
        run: |
          # Perform dry run first
          cargo release --workspace --execute --no-confirm ${{ steps.version.outputs.bump }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ matrix.component.name }}-v${{ steps.version.outputs.current }}
          name: ${{ matrix.component.name }} v${{ steps.version.outputs.current }}
          body: |
            ## Changes in ${{ matrix.component.name }} v${{ steps.version.outputs.current }}

            ### What's Changed
            - Automated release for ${{ matrix.component.name }}
            - Built from commit ${{ github.sha }}

            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ matrix.component.name }}-v${{ steps.version.outputs.previous }}...${{ matrix.component.name }}-v${{ steps.version.outputs.current }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  manual-release:
    name: Manual Release
    runs-on: ubuntu-latest
    needs: [detect-changes, rust-quality-checks]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_type != 'none'
    strategy:
      matrix:
        component: ${{ fromJson(needs.detect-changes.outputs.rust-components) }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-release
        run: cargo install cargo-release

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create manual release
        working-directory: ${{ matrix.component.path }}
        run: |
          cargo release --workspace --execute --no-confirm ${{ github.event.inputs.release_type }}

  notification:
    name: Workflow Notification
    runs-on: ubuntu-latest
    needs: [rust-quality-checks, rust-coverage, docker-build]
    if: always()
    steps:
      - name: Workflow Summary
        run: |
          echo "## Rust CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.rust-quality-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Coverage | ${{ needs.rust-coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.rust-quality-checks.result }}" == "success" && 
                "${{ needs.rust-coverage.result }}" == "success" && 
                "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some checks failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
          fi
