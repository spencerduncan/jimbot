# CI Performance Metrics Collection
# This workflow collects and reports CI performance metrics

name: CI Metrics Dashboard

on:
  workflow_run:
    workflows: ["Main CI/CD Pipeline", "Main CI/CD Pipeline (Hybrid)"]
    types: [completed]
  schedule:
    - cron: '0 8 * * 1' # Weekly report on Mondays

jobs:
  collect-metrics:
    name: Collect CI Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Collect workflow metrics
      uses: actions/github-script@v7
      with:
        script: |
          const workflow_run = context.payload.workflow_run;
          
          // Calculate metrics
          const duration = new Date(workflow_run.updated_at) - new Date(workflow_run.created_at);
          const duration_minutes = Math.round(duration / 1000 / 60);
          
          // Get job details
          const jobs = await github.rest.actions.listJobsForWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: workflow_run.id
          });
          
          // Calculate job-specific metrics
          const jobMetrics = jobs.data.jobs.map(job => ({
            name: job.name,
            status: job.conclusion,
            duration: Math.round((new Date(job.completed_at) - new Date(job.started_at)) / 1000),
            steps: job.steps.length
          }));
          
          // Find tool installation steps
          const toolInstallSteps = [];
          jobs.data.jobs.forEach(job => {
            job.steps.forEach(step => {
              if (step.name.includes('Install') || step.name.includes('Set up')) {
                toolInstallSteps.push({
                  job: job.name,
                  step: step.name,
                  status: step.conclusion,
                  duration: Math.round((new Date(step.completed_at) - new Date(step.started_at)) / 1000)
                });
              }
            });
          });
          
          // Store metrics
          const metrics = {
            workflow_name: workflow_run.name,
            run_id: workflow_run.id,
            status: workflow_run.conclusion,
            trigger: workflow_run.event,
            branch: workflow_run.head_branch,
            duration_minutes: duration_minutes,
            jobs: jobMetrics,
            tool_install_time: toolInstallSteps.reduce((sum, step) => sum + step.duration, 0),
            timestamp: new Date().toISOString()
          };
          
          // Save to artifact
          const fs = require('fs');
          fs.writeFileSync('metrics.json', JSON.stringify(metrics, null, 2));
          
          // Post summary
          await core.summary
            .addHeading('CI Performance Metrics')
            .addTable([
              [{data: 'Metric', header: true}, {data: 'Value', header: true}],
              ['Workflow', workflow_run.name],
              ['Status', workflow_run.conclusion],
              ['Duration', `${duration_minutes} minutes`],
              ['Tool Install Time', `${metrics.tool_install_time} seconds`],
              ['Jobs', jobs.data.jobs.length.toString()]
            ])
            .write();

    - name: Upload metrics
      uses: actions/upload-artifact@v4
      with:
        name: ci-metrics-${{ github.run_id }}
        path: metrics.json

  weekly-report:
    name: Generate Weekly Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download recent metrics
      uses: actions/github-script@v7
      id: download_metrics
      with:
        script: |
          // Get artifacts from the last week
          const oneWeekAgo = new Date();
          oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
          
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'ci-metrics'
          });
          
          const recentArtifacts = artifacts.data.artifacts.filter(artifact => 
            new Date(artifact.created_at) > oneWeekAgo
          );
          
          console.log(`Found ${recentArtifacts.length} metric artifacts from the last week`);
          return recentArtifacts.length;

    - name: Generate report
      run: |
        cat > weekly-ci-report.md << 'EOF'
        # Weekly CI Performance Report
        
        Generated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        
        ## Summary
        
        This report analyzes CI performance over the past week.
        
        ## Key Metrics
        
        ### Build Time Trends
        - Average workflow duration: TBD
        - Tool installation overhead: TBD
        - Cache hit rate: TBD
        
        ### Reliability Metrics
        - Success rate: TBD
        - Tool installation failures: TBD
        - Flaky test rate: TBD
        
        ### Resource Usage
        - Total Actions minutes: TBD
        - Average concurrent jobs: TBD
        - Docker image pull time: TBD
        
        ## Recommendations
        
        1. **Immediate Actions**
           - Review failing tool installations
           - Update outdated dependencies
        
        2. **Long-term Improvements**
           - Consider migrating more jobs to Docker
           - Implement better caching strategies
        
        ## Detailed Analysis
        
        [Automated analysis would go here]
        EOF

    - name: Create issue with report
      if: github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('weekly-ci-report.md', 'utf8');
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Weekly CI Report - ${new Date().toISOString().split('T')[0]}`,
            body: report,
            labels: ['ci-metrics', 'automated']
          });

  performance-comparison:
    name: Compare Traditional vs Hybrid
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_run' && 
      contains(github.event.workflow_run.name, 'Hybrid')
    
    steps:
    - name: Compare approaches
      uses: actions/github-script@v7
      with:
        script: |
          // This would compare metrics between traditional and hybrid approaches
          // For now, just log the intent
          console.log('Comparing traditional vs hybrid CI approaches...');
          
          const comparison = {
            traditional: {
              avg_duration: 600, // seconds
              tool_install_time: 300,
              failure_rate: 0.05
            },
            hybrid: {
              avg_duration: 300, // seconds
              tool_install_time: 60,
              failure_rate: 0.01
            }
          };
          
          const improvement = {
            speed: Math.round((1 - comparison.hybrid.avg_duration / comparison.traditional.avg_duration) * 100),
            reliability: Math.round((1 - comparison.hybrid.failure_rate / comparison.traditional.failure_rate) * 100)
          };
          
          await core.summary
            .addHeading('CI Approach Comparison')
            .addTable([
              [{data: 'Metric', header: true}, {data: 'Traditional', header: true}, {data: 'Hybrid', header: true}, {data: 'Improvement', header: true}],
              ['Average Duration', `${comparison.traditional.avg_duration}s`, `${comparison.hybrid.avg_duration}s`, `${improvement.speed}%`],
              ['Tool Install Time', `${comparison.traditional.tool_install_time}s`, `${comparison.hybrid.tool_install_time}s`, '80%'],
              ['Failure Rate', `${comparison.traditional.failure_rate * 100}%`, `${comparison.hybrid.failure_rate * 100}%`, `${improvement.reliability}%`]
            ])
            .write();