name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '20'
  CARGO_TERM_COLOR: always

jobs:
  # Python checks
  python-lint:
    name: Python Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            venv
          key: ${{ runner.os }}-python-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Black
        run: black --check jimbot tests

      - name: Run isort
        run: isort --check-only jimbot tests

      - name: Run Ruff
        run: ruff check jimbot tests

      - name: Run Flake8
        run: flake8 jimbot tests

      - name: Run mypy
        run: mypy jimbot

      - name: Run bandit
        run: bandit -r jimbot -f json -o bandit-report.json

  python-test:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: python-lint
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            venv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run pytest with coverage
        run: |
          pytest --cov=jimbot --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: python-${{ matrix.python-version }}

      - name: Archive coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-python-${{ matrix.python-version }}
          path: htmlcov/

  # Lua checks
  lua-lint:
    name: Lua Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Lua and LuaRocks
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.1 luarocks

      - name: Install luacheck
        run: |
          sudo luarocks install luacheck

      - name: Run luacheck
        run: luacheck . --config .luacheckrc

  # C++ checks
  cpp-lint:
    name: C++ Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format clang-tidy cppcheck

      - name: Run clang-format
        run: |
          find . -name "*.cpp" -o -name "*.hpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --error-exitcode=1 --inline-suppr jimbot/memgraph/mage_modules/

  # Protocol Buffers checks
  protobuf-lint:
    name: Protocol Buffers Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install buf
        run: |
          curl -sSL https://github.com/bufbuild/buf/releases/latest/download/buf-Linux-x86_64 -o /usr/local/bin/buf
          chmod +x /usr/local/bin/buf

      - name: Run buf lint
        run: buf lint

      - name: Run buf format check
        run: buf format --diff --exit-code

  # SQL checks
  sql-lint:
    name: SQL Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install sqlfluff
        run: pip install sqlfluff

      - name: Run sqlfluff
        run: sqlfluff lint . --config .sqlfluff

  # JavaScript/TypeScript checks (if package.json exists)
  node-checks:
    name: Node.js Checks
    runs-on: ubuntu-latest
    if: hashFiles('package.json') != ''
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Prettier
        run: npm run format:check

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript compiler
        run: npm run typecheck

      - name: Run tests
        run: npm test

  # Docker build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker compose build --parallel

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-test, docker-build]
    services:
      memgraph:
        image: memgraph/memgraph-platform:latest
        ports:
          - 7687:7687
        options: >-
          --health-cmd "echo 'MATCH (n) RETURN n LIMIT 1;' | mgconsole"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      questdb:
        image: questdb/questdb:latest
        ports:
          - 9000:9000
          - 8812:8812
        options: >-
          --health-cmd "curl -f http://localhost:9000/exec?query=SELECT%201"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run integration tests
        run: |
          pytest tests/integration -v --tb=short

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        language: ['python', 'javascript']
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Summary job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      [
        python-lint,
        python-test,
        lua-lint,
        cpp-lint,
        protobuf-lint,
        sql-lint,
        docker-build,
        integration-tests,
        security-scan,
      ]
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All jobs succeeded"
          fi
