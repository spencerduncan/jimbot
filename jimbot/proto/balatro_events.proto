syntax = "proto3";

package jimbot;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

// Base event wrapper for all events
message Event {
  string event_id = 1;        // UUID
  int64 timestamp = 2;        // Unix timestamp in milliseconds
  EventType type = 3;         // Event type enum
  string source = 4;          // Source component (e.g., "BalatroMCP")
  int32 version = 5;          // Event schema version
  string priority = 6;        // Priority level: "low", "normal", "high"
  string game_id = 7;         // Game instance ID
  string session_id = 8;      // Session ID
  int32 sequence_number = 9;  // Sequence number for ordering
  
  oneof payload {
    // Game flow events
    GameStateEvent game_state = 10;
    HeartbeatEvent heartbeat = 11;
    MoneyChangedEvent money_changed = 12;
    ScoreChangedEvent score_changed = 13;
    HandPlayedEvent hand_played = 14;
    CardsDiscardedEvent cards_discarded = 15;
    JokersChangedEvent jokers_changed = 16;
    RoundChangedEvent round_changed = 17;
    PhaseChangedEvent phase_changed = 18;
    RoundCompleteEvent round_complete = 19;
    ConnectionTestEvent connection_test = 20;
    
    // Additional game events
    GameStartEvent game_start = 21;
    GameOverEvent game_over = 22;
    BlindDefeatedEvent blind_defeated = 23;
    ShopEnteredEvent shop_entered = 24;
    CardPurchasedEvent card_purchased = 25;
    CardSoldEvent card_sold = 26;
    CardEnhancedEvent card_enhanced = 27;
    JokerTriggeredEvent joker_triggered = 28;
    StateSnapshotEvent state_snapshot = 29;
    ErrorEvent error = 30;
    
    // Learning and strategy events
    LearningDecisionRequest learning_decision_request = 31;
    LearningDecisionResponse learning_decision_response = 32;
    StrategyRequest strategy_request = 33;
    StrategyResponse strategy_response = 34;
    
    // Knowledge and metrics events
    KnowledgeUpdate knowledge_update = 35;
    MetricEvent metric = 36;
    
    // Extension point for custom events
    google.protobuf.Any custom_event = 99;
  }
  
  // Metadata for correlation and debugging
  map<string, string> metadata = 100;
}

// Event type enumeration
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_GAME_STATE = 1;
  EVENT_TYPE_HEARTBEAT = 2;
  EVENT_TYPE_MONEY_CHANGED = 3;
  EVENT_TYPE_SCORE_CHANGED = 4;
  EVENT_TYPE_HAND_PLAYED = 5;
  EVENT_TYPE_CARDS_DISCARDED = 6;
  EVENT_TYPE_JOKERS_CHANGED = 7;
  EVENT_TYPE_ROUND_CHANGED = 8;
  EVENT_TYPE_PHASE_CHANGED = 9;
  EVENT_TYPE_ROUND_COMPLETE = 10;
  EVENT_TYPE_CONNECTION_TEST = 11;
  EVENT_TYPE_GAME_START = 12;
  EVENT_TYPE_GAME_OVER = 13;
  EVENT_TYPE_BLIND_DEFEATED = 14;
  EVENT_TYPE_SHOP_ENTERED = 15;
  EVENT_TYPE_CARD_PURCHASED = 16;
  EVENT_TYPE_CARD_SOLD = 17;
  EVENT_TYPE_CARD_ENHANCED = 18;
  EVENT_TYPE_JOKER_TRIGGERED = 19;
  EVENT_TYPE_STATE_SNAPSHOT = 20;
  EVENT_TYPE_ERROR = 21;
  EVENT_TYPE_LEARNING_DECISION_REQUEST = 22;
  EVENT_TYPE_LEARNING_DECISION_RESPONSE = 23;
  EVENT_TYPE_STRATEGY_REQUEST = 24;
  EVENT_TYPE_STRATEGY_RESPONSE = 25;
  EVENT_TYPE_KNOWLEDGE_UPDATE = 26;
  EVENT_TYPE_METRIC = 27;
  EVENT_TYPE_CUSTOM = 99;
}

// Game phase enumeration
enum GamePhase {
  PHASE_UNSPECIFIED = 0;
  PHASE_MENU = 1;
  PHASE_BLIND_SELECT = 2;
  PHASE_SHOP = 3;
  PHASE_PLAYING = 4;
  PHASE_GAME_OVER = 5;
  PHASE_ROUND_EVAL = 6;
  PHASE_TAROT_PACK = 7;
  PHASE_PLANET_PACK = 8;
  PHASE_SPECTRAL_PACK = 9;
  PHASE_STANDARD_PACK = 10;
  PHASE_BUFFOON_PACK = 11;
  PHASE_BOOSTER_PACK = 12;
}

// Card suits
enum Suit {
  SUIT_UNSPECIFIED = 0;
  SUIT_SPADES = 1;
  SUIT_HEARTS = 2;
  SUIT_CLUBS = 3;
  SUIT_DIAMONDS = 4;
}

// Card ranks
enum Rank {
  RANK_UNSPECIFIED = 0;
  RANK_ACE = 1;
  RANK_TWO = 2;
  RANK_THREE = 3;
  RANK_FOUR = 4;
  RANK_FIVE = 5;
  RANK_SIX = 6;
  RANK_SEVEN = 7;
  RANK_EIGHT = 8;
  RANK_NINE = 9;
  RANK_TEN = 10;
  RANK_JACK = 11;
  RANK_QUEEN = 12;
  RANK_KING = 13;
}

// Playing card
message Card {
  string id = 1;
  Rank rank = 2;
  Suit suit = 3;
  string enhancement = 4;  // e.g., "Gold", "Steel", "Glass"
  string edition = 5;      // e.g., "Foil", "Holographic", "Polychrome"
  string seal = 6;         // e.g., "Gold", "Red", "Blue", "Purple"
  int32 position = 7;      // 0-based position in hand
}

// Joker card
message Joker {
  string id = 1;
  string name = 2;
  int32 position = 3;      // 0-based position
  JokerProperties properties = 4;
}

message JokerProperties {
  int32 mult = 1;
  int32 chips = 2;
  int32 cost = 3;
  int32 sell_value = 4;
  string edition = 5;
}

// Consumable (Tarot, Planet, Spectral)
message Consumable {
  string id = 1;
  string name = 2;
  string card_type = 3;    // "Tarot", "Planet", "Spectral"
  int32 position = 4;
  ConsumableProperties properties = 5;
}

message ConsumableProperties {
  int32 cost = 1;
  string edition = 2;
}

// Blind information
message Blind {
  string name = 1;
  int32 chips = 2;
  string chip_text = 3;
  float mult = 4;
  bool defeated = 5;
  bool boss = 6;
}

// Deck information
message Deck {
  int32 remaining_count = 1;
  repeated Card cards_remaining = 2;  // Preview of top cards
  repeated Card full_deck = 3;        // Complete deck composition
}

// Shop item
message ShopItem {
  string name = 1;
  int32 cost = 2;
  string rarity = 3;
}

// Complete game state
message GameStateEvent {
  bool in_game = 1;
  string game_id = 2;
  int32 ante = 3;
  int32 round = 4;
  int32 hand_number = 5;
  
  // Resources
  int32 chips = 6;
  int32 mult = 7;
  int32 money = 8;
  int32 hand_size = 9;
  int32 hands_remaining = 10;
  int32 discards_remaining = 11;
  
  // Collections
  repeated Joker jokers = 12;
  repeated Card hand = 13;
  Deck deck = 14;
  repeated Consumable consumables = 15;
  map<string, ShopItem> shop_items = 16;
  
  // State
  GamePhase game_state = 17;
  string ui_state = 18;
  Blind blind = 19;
  
  // Metadata
  int32 frame_count = 20;
  map<string, ScoreHistory> score_history = 21;
  
  // Change tracking
  repeated Event changes = 22;
  bool initial = 23;
  bool debug = 24;
}

// Score history entry
message ScoreHistory {
  repeated int32 scores = 1;
}

// Heartbeat event
message HeartbeatEvent {
  string version = 1;
  int64 uptime = 2;
  bool headless = 3;
  string game_state = 4;
}

// Money changed event
message MoneyChangedEvent {
  int32 old_value = 1;
  int32 new_value = 2;
  int32 difference = 3;
}

// Score changed event
message ScoreChangedEvent {
  int32 old_chips = 1;
  int32 new_chips = 2;
  int32 old_mult = 3;
  int32 new_mult = 4;
}

// Hand played event
message HandPlayedEvent {
  int32 hands_remaining = 1;
  int32 hand_number = 2;
}

// Cards discarded event
message CardsDiscardedEvent {
  int32 discards_remaining = 1;
}

// Jokers changed event
message JokersChangedEvent {
  int32 old_count = 1;
  int32 new_count = 2;
  repeated Joker jokers = 3;
}

// Round changed event
message RoundChangedEvent {
  int32 ante = 1;
  int32 round = 2;
}

// Phase changed event
message PhaseChangedEvent {
  string old_phase = 1;
  string new_phase = 2;
}

// Round complete event
message RoundCompleteEvent {
  int32 ante = 1;
  int32 round = 2;
  int32 score = 3;
  int32 money = 4;
}

// Connection test event
message ConnectionTestEvent {
  string message = 1;
}

// Batch event wrapper for sending multiple events
message EventBatch {
  string batch_id = 1;
  repeated Event events = 2;
  string source = 3;
  int64 timestamp = 4;
}

// Game start event
message GameStartEvent {
  string seed = 1;
  string stake = 2;
  string deck = 3;
  int32 starting_money = 4;
  int32 starting_hands = 5;
  int32 starting_discards = 6;
  map<string, string> game_config = 7;
}

// Game over event
message GameOverEvent {
  string reason = 1;      // "victory", "defeat", "quit"
  int32 final_ante = 2;
  int32 final_round = 3;
  int64 final_score = 4;
  int32 final_money = 5;
  int64 duration_ms = 6;
  map<string, int32> stats = 7;
}

// Blind defeated event
message BlindDefeatedEvent {
  Blind blind = 1;
  int32 score_achieved = 2;
  int32 hands_used = 3;
  int32 money_earned = 4;
}

// Shop entered event  
message ShopEnteredEvent {
  int32 ante = 1;
  int32 round = 2;
  int32 money_available = 3;
  repeated ShopItem items = 4;
}

// Card purchased event
message CardPurchasedEvent {
  ShopItem item = 1;
  int32 cost = 2;
  int32 money_after = 3;
  string purchase_type = 4;  // "joker", "consumable", "voucher"
}

// Card sold event
message CardSoldEvent {
  oneof sold_item {
    Joker joker = 1;
    Consumable consumable = 2;
  }
  int32 sell_value = 3;
  int32 money_after = 4;
}

// Card enhanced event
message CardEnhancedEvent {
  Card card = 1;
  string enhancement_type = 2;
  string previous_enhancement = 3;
  Consumable used_consumable = 4;
}

// Joker triggered event
message JokerTriggeredEvent {
  Joker joker = 1;
  string trigger_context = 2;  // "hand_played", "card_discarded", etc.
  int32 mult_added = 3;
  int32 chips_added = 4;
  map<string, string> trigger_data = 5;
}

// State snapshot event (full game state at a point in time)
message StateSnapshotEvent {
  GameStateEvent full_state = 1;
  string reason = 2;  // "periodic", "requested", "checkpoint"
}

// Error event
message ErrorEvent {
  string error_code = 1;
  string message = 2;
  string stack_trace = 3;
  map<string, string> context = 4;
  google.protobuf.Timestamp occurred_at = 5;
}

// Learning decision request
message LearningDecisionRequest {
  string request_id = 1;
  GameStateEvent game_state = 2;
  repeated Action available_actions = 3;
  int32 time_limit_ms = 4;
  map<string, float> context_features = 5;
}

// Learning decision response  
message LearningDecisionResponse {
  string request_id = 1;
  string response_id = 2;
  Action selected_action = 3;
  float confidence = 4;
  map<string, float> action_scores = 5;
  string strategy_used = 6;
  int32 processing_time_ms = 7;
}

// Strategy request
message StrategyRequest {
  string request_id = 1;
  GameStateEvent game_state = 2;
  string strategy_type = 3;  // "immediate", "short_term", "long_term"
  repeated string considerations = 4;
  int32 time_limit_ms = 5;
}

// Strategy response
message StrategyResponse {
  string request_id = 1;
  string response_id = 2;
  Strategy recommended_strategy = 3;
  repeated StrategyOption alternatives = 4;
  map<string, float> evaluation_scores = 5;
  int32 processing_time_ms = 6;
}

// Knowledge update
message KnowledgeUpdate {
  string update_id = 1;
  string knowledge_type = 2;  // "joker_synergy", "hand_value", "blind_strategy"
  oneof update {
    JokerSynergyUpdate joker_synergy = 3;
    HandValueUpdate hand_value = 4;
    BlindStrategyUpdate blind_strategy = 5;
    google.protobuf.Any custom_update = 99;
  }
  float confidence = 100;
  string source = 101;  // "learned", "calculated", "observed"
}

// Metric event
message MetricEvent {
  string metric_name = 1;
  string metric_type = 2;  // "counter", "gauge", "histogram", "summary"
  double value = 3;
  map<string, string> labels = 4;
  google.protobuf.Timestamp recorded_at = 5;
  string unit = 6;
}

// Action definition (for learning/strategy)
message Action {
  string action_id = 1;
  string action_type = 2;  // "play_hand", "discard", "buy", "sell", "reroll", "skip"
  oneof action_data {
    PlayHandAction play_hand = 3;
    DiscardAction discard = 4;
    BuyAction buy = 5;
    SellAction sell = 6;
    RerollAction reroll = 7;
    SkipAction skip = 8;
  }
  map<string, string> metadata = 99;
}

// Specific action types
message PlayHandAction {
  repeated int32 card_indices = 1;  // 0-based indices
}

message DiscardAction {
  repeated int32 card_indices = 1;  // 0-based indices
}

message BuyAction {
  int32 shop_index = 1;  // 0-based index in shop
  string item_type = 2;  // "joker", "consumable", "voucher"
}

message SellAction {
  oneof target {
    int32 joker_index = 1;      // 0-based index
    int32 consumable_index = 2; // 0-based index
  }
}

message RerollAction {
  // Empty - reroll has no parameters
}

message SkipAction {
  string skip_type = 1;  // "skip_blind", "skip_shop", "end_round"
}

// Strategy definition
message Strategy {
  string strategy_id = 1;
  string name = 2;
  string description = 3;
  repeated StrategyStep steps = 4;
  map<string, float> expected_outcomes = 5;
}

message StrategyStep {
  int32 step_number = 1;
  string description = 2;
  Action recommended_action = 3;
  repeated string conditions = 4;
  float priority = 5;
}

message StrategyOption {
  Strategy strategy = 1;
  float score = 2;
  string reasoning = 3;
}

// Knowledge update types
message JokerSynergyUpdate {
  string joker1_id = 1;
  string joker2_id = 2;
  float synergy_score = 3;
  string synergy_type = 4;
  repeated string conditions = 5;
}

message HandValueUpdate {
  string hand_type = 1;  // "pair", "flush", etc.
  float base_value = 2;
  map<string, float> modifiers = 3;
}

message BlindStrategyUpdate {
  string blind_name = 1;
  repeated string effective_strategies = 2;
  repeated string ineffective_strategies = 3;
  map<string, float> hand_type_effectiveness = 4;
}