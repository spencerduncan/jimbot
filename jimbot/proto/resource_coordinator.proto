syntax = "proto3";

package jimbot;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// Resource types that can be managed
enum ResourceType {
  RESOURCE_TYPE_UNSPECIFIED = 0;
  RESOURCE_TYPE_GPU = 1;
  RESOURCE_TYPE_CLAUDE_API = 2;
  RESOURCE_TYPE_MEMORY = 3;
  RESOURCE_TYPE_CPU = 4;
}

// Resource request priority
enum Priority {
  PRIORITY_UNSPECIFIED = 0;
  PRIORITY_LOW = 1;
  PRIORITY_NORMAL = 2;
  PRIORITY_HIGH = 3;
  PRIORITY_CRITICAL = 4;
}

// Request status
enum RequestStatus {
  REQUEST_STATUS_UNSPECIFIED = 0;
  REQUEST_STATUS_PENDING = 1;
  REQUEST_STATUS_GRANTED = 2;
  REQUEST_STATUS_DENIED = 3;
  REQUEST_STATUS_QUEUED = 4;
  REQUEST_STATUS_RELEASED = 5;
  REQUEST_STATUS_EXPIRED = 6;
}

// Resource allocation request
message ResourceRequest {
  string request_id = 1;      // Unique request ID
  string component = 2;       // Requesting component (e.g., "ray_rllib")
  ResourceType resource = 3;  // Type of resource requested
  int32 quantity = 4;         // Amount requested (e.g., GPU memory in MB)
  Priority priority = 5;      // Request priority
  google.protobuf.Duration timeout = 6;  // Max time to wait for resource
  google.protobuf.Duration duration = 7; // Expected usage duration
  map<string, string> metadata = 8;      // Additional request metadata
}

// Resource allocation response
message ResourceResponse {
  string request_id = 1;
  RequestStatus status = 2;
  string message = 3;         // Human-readable status message
  google.protobuf.Timestamp granted_at = 4;
  google.protobuf.Timestamp expires_at = 5;
  string token = 6;           // Token to use when releasing resource
  int32 granted_quantity = 7; // Actual amount granted (may be less than requested)
}

// Resource release request
message ReleaseRequest {
  string request_id = 1;
  string token = 2;
  string component = 3;
}

// Resource release response
message ReleaseResponse {
  bool success = 1;
  string message = 2;
}

// Query for current resource status
message ResourceStatusRequest {
  ResourceType resource = 1;  // Empty for all resources
}

// Current resource status
message ResourceStatus {
  ResourceType resource = 1;
  int32 total_capacity = 2;
  int32 available = 3;
  int32 allocated = 4;
  repeated AllocationInfo allocations = 5;
}

// Information about a specific allocation
message AllocationInfo {
  string request_id = 1;
  string component = 2;
  int32 quantity = 3;
  google.protobuf.Timestamp allocated_at = 4;
  google.protobuf.Timestamp expires_at = 5;
}

// Response containing multiple resource statuses
message ResourceStatusResponse {
  repeated ResourceStatus statuses = 1;
  google.protobuf.Timestamp timestamp = 2;
}

// Health check request
message HealthCheckRequest {}

// Health check response
message HealthCheckResponse {
  bool healthy = 1;
  string version = 2;
  int64 uptime_seconds = 3;
  map<string, string> metadata = 4;
}

// The Resource Coordinator service
service ResourceCoordinator {
  // Request a resource allocation
  rpc RequestResource(ResourceRequest) returns (ResourceResponse);
  
  // Release a previously allocated resource
  rpc ReleaseResource(ReleaseRequest) returns (ReleaseResponse);
  
  // Get current resource status
  rpc GetResourceStatus(ResourceStatusRequest) returns (ResourceStatusResponse);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  
  // Stream resource status updates (for monitoring)
  rpc StreamResourceStatus(ResourceStatusRequest) returns (stream ResourceStatus);
}